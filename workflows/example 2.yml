name: Build and Package NetPilot

on:
  push:
    branches:
      - "main"
    tags:
      - "v*.*.*"
  workflow_dispatch:

concurrency:
  group: build-release
  cancel-in-progress: true

jobs:
  build-wheels:
    name: Build on ${{ matrix.os }} / Python ${{ matrix.python-version }}
    env:
      PYTHONUTF8: "1"
      PYTHONIOENCODING: "utf-8"
      __BUILDING_WHEEL_2099: "1"

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        python-version: [ "3.12", "3.13" ]

    steps:
      - name: 📥 Checkout source code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Create virtualenv
        run: |
          python -m venv venv
          if [ -x "venv/bin/python" ]; then
            echo "PYTHON_EXEC=$(pwd)/venv/bin/python" >> $GITHUB_ENV
          else
            echo "PYTHON_EXEC=$(pwd)/venv/Scripts/python.exe" >> $GITHUB_ENV
          fi
        shell: bash

      - name: 📚 Install build dependencies
        run: |
          $PYTHON_EXEC -m pip install --upgrade pip
          $PYTHON_EXEC -m pip install wheel setuptools cython requests
        shell: bash

      - name: 🏗️ Build wheel (release mode)
        run: |
          $PYTHON_EXEC setup.py build_ext --inplace
          $PYTHON_EXEC setup.py bdist_wheel --release
        shell: bash

      - name: ⬆️ Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/*.whl
          retention-days: 3

  #      # ✅ PyInstaller 打包步骤开始
  #      - name: 🛠️ Install PyInstaller
  #        run: |
  #          $PYTHON_EXEC -m pip install pyinstaller
  #        shell: bash
  #
  #      - name: 📦 Build single-file executable with PyInstaller
  #        if: matrix.python-version == '3.13'
  #        run: |
  #          PYINSTALLER_HOOKS="$GITHUB_WORKSPACE/.github/hooks"
  #          $PYTHON_EXEC -m PyInstaller entrypoints.py \
  #            --name netpilot \
  #            --onefile \
  #            --strip \
  #            --clean \
  #            --noconfirm \
  #            --additional-hooks-dir="$PYINSTALLER_HOOKS" \
  #            --exclude-module=tkinter \
  #            --exclude-module=unittest \
  #            --exclude-module=email \
  #            --exclude-module=test
  #        shell: bash
  #
  #      - name: ⬆️ Upload PyInstaller binary
  #        if: matrix.python-version == '3.13'
  #        uses: actions/upload-artifact@v4
  #        with:
  #          name: binary-${{ matrix.os }}-py${{ matrix.python-version }}
  #          path: dist/netpilot*
  #          retention-days: 3
  #      # ✅ PyInstaller 步骤结束


  package-artifacts:
    name: Package all wheels into one zip
    needs: build-wheels
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: collected
          merge-multiple: true

      - name: 📦 Bundle all wheels
        run: |
          mkdir -p packaged
          zip -j packaged/netpilot-all.zip collected/*
        shell: bash

      - name: ⬆️ Upload final packaged zip
        uses: actions/upload-artifact@v4
        with:
          name: netpilot-packaged
          path: packaged/*
          retention-days: 3
